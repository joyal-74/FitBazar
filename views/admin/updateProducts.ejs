<head>
    <link rel="stylesheet" href="/css/addproducts.css">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
</head>

<body class="bg-violet">
    <!-- Navbar -->
    <%- include('../partials/header') %>

    <!-- Sidebar + Main Content -->
    <div class="container-fluid w-100 sidebar-header">
        <div class="row g-0">
            <!-- Sidebar -->
            <%- include('../partials/sidebar', { activePage: 'products' }) %>

            <!-- Main Content -->
            <main class="col-md-10 col-lg-9 px-md-4 py-4 mx-auto px-3">
                <h3 class="fw-bold">Edit Product</h3>
            
                <!-- Product Form -->
                <div class="card add-product-form">
                    <div class="card-body p-3">
                        <form id="editProductForm" enctype="multipart/form-data">
                            <input type="hidden" id="productId" name="productId" value="<%= product.productId %>">
            
                            <div class="row g-3 mb-4">
                                <div class="col-md-6">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <input type="text" class="form-control form-control-sm" id="productName" name="productName" value="<%= product.name %>" placeholder="Enter product name">
                                    <div id="nameError" class="form-text text-danger"></div>
                                </div>
                                <div class="col-md-6">
                                    <label for="productCategory" class="form-label">Category</label>
                                    <select class="form-select form-select-sm" id="productCategory" name="productCategory">
                                        <option hidden>Select category</option>
                                        <% category.forEach(category => { %>
                                            <option value="<%= category._id %>" <%= category._id.toString() === product.category._id.toString() ? 'selected' : '' %>>
                                                <%= category.name %>
                                            </option>
                                        <% }) %>
                                    </select>
                                </div>
                            </div>
            
                            <div class="row g-3 mb-4">
                                <div class="col-md-4">
                                    <label for="brand" class="form-label">Brand</label>
                                    <input type="text" class="form-control form-control-sm" id="brand" name="productBrand" value="<%= product.brand %>" placeholder="Enter brand">
                                    <div id="brandError" class="form-text text-danger"></div>
                                </div>
                                <div class="col-md-4">
                                    <label for="basePrice" class="form-label">Base Price</label>
                                    <input type="number" id="productPrice" name="productPrice" class="form-control form-control-sm" value="<%= product.price %>" placeholder="Enter price">
                                    <div id="priceError" class="form-text text-danger"></div>
                                </div>
                                <div class="col-md-4">
                                    <label for="discountPrice" class="form-label">Discount Percentage (%)</label>
                                    <input type="number" id="productOffer" name="productOffer" class="form-control form-control-sm" value="<%= product.productOffer || 0 %>" placeholder="Enter discount">
                                </div>
                            </div>
            
                            <div class="row g-3 mb-4">
                                <div class="col-md-6">
                                    <label for="shortDescription" class="form-label">Short Description</label>
                                    <textarea class="form-control" id="shortDescription" name="shortDescription" placeholder="Enter short description"><%= product.shortDescription %></textarea>
                                </div>
                                <div class="col-md-6">
                                    <label for="productDescription" class="form-label">Long Description</label>
                                    <textarea class="form-control" id="productDescription" name="productDescription" placeholder="Enter description"><%= product.description %></textarea>
                                    <div id="descriptionError" class="form-text text-danger"></div>
                                </div>
                            </div>
            
                            <div class="mb-4">
                                <label for="productSpec" class="form-label">Specifications</label>
                                <textarea class="form-control" id="productSpec" name="productSpec" placeholder="Enter specifications"><%= product.productSpec %></textarea>
                                <div id="specError" class="form-text text-danger"></div>
                            </div>
            
                            <!-- Image Section -->
                            <div class="mb-4">
                                <label class="form-label">Product Images</label>
                                <div class="image-upload-row">
                                    <% for(let i = 0; i < 4; i++) { %>
                                        <div class="image-upload-slot" data-slot="<%= i + 1 %>">
                                            <div class="image-upload-dropzone <%= product.images[i] ? 'd-none' : '' %>">
                                                <i class="fa-solid fa-upload"></i>
                                                <p class="mb-0">Add Image</p>
                                                <input type="file" class="d-none" name="productImages[]" accept="image/*">
                                            </div>
                                            <div class="image-preview <%= product.images[i] ? 'filled' : '' %>">
                                                <% if(product.images[i]) { %>
                                                    <img src="<%= product.images[i] %>" alt="Preview" class="img-fluid">
                                                    <button type="button" class="remove-image-btn" data-image-url="<%= product.images[i] %>">Ã—</button>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                                <div id="imageError" class="text-center form-text text-danger"></div>
                            </div>
            
                            <!-- Variant Section -->
                            <div class="mb-4">
                                <label class="form-label">Product Variants</label>
                                <div id="variantContainer" class="variant-container">
                                    <% product.variants.forEach((variant, index) => { %>
                                        <div class="variant-item mb-3 p-3 border rounded" data-variant-index="<%= index %>">
                                            <div class="row g-3 align-items-end">
                                                <div class="col-md-4">
                                                    <label class="form-label">Color</label>
                                                    <input type="text" class="form-control form-control-sm" name="colorVariant[<%= index %>]" value="<%= variant.color %>" placeholder="e.g., Blue">
                                                    <div class="form-text text-danger color-error"></div>
                                                </div>
                                                <div class="col-md-4">
                                                    <label class="form-label">Weight</label>
                                                    <input type="text" class="form-control form-control-sm" name="weightVariant[<%= index %>]" value="<%= variant.weight %>" placeholder="e.g., 500g">
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label">Stock</label>
                                                    <input type="number" class="form-control form-control-sm" name="stockVariant[<%= index %>]" value="<%= variant.stock %>" placeholder="e.g., 10">
                                                    <div class="form-text text-danger stock-error"></div>
                                                </div>
                                                <div class="col-md-1">
                                                    <button type="button" class="btn remove-variant"><i class="fas fa-times"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                                <div class="d-flex justify-content-between mt-3">
                                    <button type="button" id="addVariantButton" class="btn btn-sm btn-outline-secondary rounded-2">
                                        <i class="fas fa-plus me-1"></i> Add Variant
                                    </button>
                                </div>
                            </div>
            
                            <!-- Visibility & Submit -->
                            <div class="row mt-4">
                                <div class="col-md-6 d-flex align-items-center gap-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="visibility" id="inlineRadio1" value="true" <% if (product.visibility===true || product.visibility==='true') { %> checked <% } %>>
                                        <label class="form-check-label" for="inlineRadio1">Active</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="visibility" id="inlineRadio2" value="false" <% if (product.visibility===false || product.visibility==='false') { %> checked <% } %>>
                                        <label class="form-check-label" for="inlineRadio2">Hide</label>
                                    </div>
                                </div>
                                <div class="col-md-6 d-flex justify-content-end gap-3">
                                    <a class="btn cancel-btn" href="/admin/products">Cancel</a>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fa fa-check-circle me-2"></i> Update
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </main>
            
        </div>
    </div>

    <!-- Cropping Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title fw-bold" id="cropModalLabel">Crop Your Image</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="img-container rounded overflow-hidden bg-light">
                        <img id="imageToCrop" src="" alt="Image to crop" class="img-fluid" style="max-height: 500px; object-fit: contain;">
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary px-4 py-2" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary px-4 py-2 fw-semibold" id="cropButton">Crop & Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Spinner Overlay -->
    <div id="spinnerOverlay" class="spinner-overlay d-none">
        <div class="spinner-box">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Verifying...</span>
            </div>
            <p class="text-white mt-3">Processing...</p>
        </div>
    </div>

    <script>
        const spinnerOverlay = document.getElementById("spinnerOverlay");

        document.addEventListener("DOMContentLoaded", function () {
            let cropper;
            let currentInput;
            let currentPreview;
            let removedImages = [];
            let newImages = [];

            // Form submission
            const editProductForm = document.getElementById("editProductForm");
            if (editProductForm) {
                editProductForm.addEventListener("submit", async function (event) {
                    event.preventDefault();

                    clearErrors();

                    if (!validateForm()) {
                        return;
                    }

                    const formData = new FormData(this);

                    document.querySelectorAll(".remove-image-btn[data-removed='true']").forEach(btn => {
                        removedImages.push(btn.getAttribute("data-image-url"));
                    });

                    if (removedImages.length > 0) {
                        formData.append("removedImages", JSON.stringify(removedImages));
                    }

                    spinnerOverlay.classList.remove("d-none");

                    try {
                        const response = await fetch(`/admin/products/${document.getElementById('productId').value}`, {
                            method: "PUT",
                            body: formData,
                        });

                        const result = await response.json();
                        spinnerOverlay.classList.add("d-none");

                        if (response.ok) {
                            Swal.fire({
                                position: "top-center",
                                icon: "success",
                                text: "Product updated successfully!",
                                showConfirmButton: false,
                                timer: 2000,
                            }).then(() => {
                                window.location.href = "/admin/products";
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                text: result.error || "An unexpected error occurred.",
                            });
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        spinnerOverlay.classList.add("d-none");
                        Swal.fire({
                            icon: "error",
                            text: "Something went wrong. Please try again.",
                        });
                    }
                });
            }

            // Validation function
            function validateForm() {
                let isValid = true;

                const productName = document.getElementById("productName").value.trim();
                if (!productName || productName.length < 2) {
                    showError("nameError", "Product name is required and must be at least 2 characters.");
                    isValid = false;
                }

                const productCategory = document.getElementById("productCategory").value;
                if (!productCategory || productCategory === "Select category") {
                    showError("nameError", "Please select a category.");
                    isValid = false;
                }

                const brand = document.getElementById("brand").value.trim();
                if (!brand || brand.length < 2) {
                    showError("brandError", "Brand is required and must be at least 2 characters.");
                    isValid = false;
                }

                const price = document.getElementById("productPrice").value;
                if (!price || price <= 0) {
                    showError("priceError", "Base price is required and must be greater than 0.");
                    isValid = false;
                }

                const discount = document.getElementById("productOffer").value;
                if (discount && (discount < 0 || discount > 100)) {
                    showError("priceError", "Discount must be between 0 and 100.");
                    isValid = false;
                }

                const shortDesc = document.getElementById("shortDescription").value.trim();
                if (!shortDesc || shortDesc.length < 10) {
                    showError("descriptionError", "Short description is required and must be at least 10 characters.");
                    isValid = false;
                }

                const longDesc = document.getElementById("productDescription").value.trim();
                if (!longDesc || longDesc.length < 20) {
                    showError("descriptionError", "Long description is required and must be at least 20 characters.");
                    isValid = false;
                }

                const spec = document.getElementById("productSpec").value.trim();
                if (spec && spec.length < 10) {
                    showError("specError", "Specifications must be at least 10 characters if provided.");
                    isValid = false;
                }

                const filledSlots = document.querySelectorAll(".image-preview.filled").length;
                const newImageCount = newImages.length;

                const totalImages = filledSlots + newImageCount - removedImages.length;

                console.log("Filled slots (current):", filledSlots);
                console.log("New images:", newImageCount);
                console.log("Removed images tracked:", removedImages.length);
                console.log("Total images:", totalImages);

                if (totalImages < 3) {
                    showError("imageError", "At least 3 images are required.");
                    isValid = false;
                }

                const variantItems = document.querySelectorAll(".variant-item");
                if (variantItems.length === 0) {
                    showError("stock-error", "At least one variant is required.", variantContainer);
                    isValid = false;
                } else {
                    variantItems.forEach((item, index) => {
                        const color = item.querySelector(`input[name="colorVariant[${index}]"]`).value.trim();
                        const weight = item.querySelector(`input[name="weightVariant[${index}]"]`).value.trim();
                        const stock = item.querySelector(`input[name="stockVariant[${index}]"]`).value;

                        if (!color && !weight) {
                            showError("color-error", "Either color or weight is required.", item);
                            isValid = false;
                        }

                        if (!stock || stock < 0) {
                            showError("stock-error", "Stock is required and must be 0 or greater.", item);
                            isValid = false;
                        }
                    });
                }

                return isValid;
            }

            // Helper functions for error handling
            function showError(elementId, message, container = null) {
                const errorElement = container 
                    ? container.querySelector(`.${elementId}`) 
                    : document.getElementById(elementId);
                if (errorElement) {
                    errorElement.textContent = message;
                }
            }

            function clearErrors() {
                const errorElements = document.querySelectorAll(".error-message, #nameError, #brandError, #priceError, #descriptionError, #specError, #imageError");
                errorElements.forEach(el => el.textContent = "");
            }

            // Variant Management
            const variantContainer = document.getElementById("variantContainer");
            const addVariantButton = document.getElementById("addVariantButton");

            if (variantContainer && addVariantButton) {
                addVariantButton.addEventListener("click", function () {
                    const variantIndex = variantContainer.querySelectorAll(".variant-item").length;
                    const variantItem = document.createElement("div");
                    variantItem.className = "variant-item mb-3 p-3 border rounded";
                    variantItem.setAttribute("data-variant-index", variantIndex);
                    variantItem.innerHTML = `
                            <div class="d-flex gap-3 align-items-end">
                                <div class="w-100">
                                    <label class="form-label">Color</label>
                                    <input type="text" class="form-control form-control-sm" name="colorVariant[${variantIndex}]" placeholder="e.g., Blue">
                                    <div class="error-message color-error" style="font-size: 0.8em; color: #ff0101;"></div>
                                </div>
                                <div class="w-100">
                                    <label class="form-label">Weight</label>
                                    <input type="text" class="form-control form-control-sm" name="weightVariant[${variantIndex}]" placeholder="e.g., 500g">
                                </div>
                                <div class="w-100">
                                    <label class="form-label">Stock</label>
                                    <input type="number" class="form-control form-control-sm" name="stockVariant[${variantIndex}]" placeholder="e.g., 10">
                                    <div class="error-message stock-error" style="font-size: 0.8em; color: #ff0101;"></div>
                                </div>
                                <button type="button" class="btn remove-variant">
                                    x
                                </button>
                            </div>
                        `;
                    variantContainer.appendChild(variantItem);
                    updateRemoveButtons();
                });

                variantContainer.addEventListener("click", function (event) {
                    if (event.target.closest(".remove-variant")) {
                        const variantItem = event.target.closest(".variant-item");
                        variantItem.remove();
                        updateRemoveButtons();
                    }
                });

                function updateRemoveButtons() {
                    const removeButtons = variantContainer.querySelectorAll(".remove-variant");
                    removeButtons.forEach((button) => (button.disabled = removeButtons.length <= 1));
                }

                updateRemoveButtons();
            }

            // Image Upload Functions
            function setupImageSlots() {
            const slots = document.querySelectorAll(".image-upload-slot");

            slots.forEach((slot, index) => {
                const dropzone = slot.querySelector(".image-upload-dropzone");
                const input = slot.querySelector('input[type="file"]');
                const preview = slot.querySelector(".image-preview");
                const existingImage = preview.querySelector("img");

                // Handle existing images
                if (existingImage) {
                    slot.classList.add("filled");
                    dropzone.classList.add("d-none");

                    existingImage.addEventListener("click", () => {
                        openCropModal(existingImage.src, (croppedFile) => {
                            existingImage.src = URL.createObjectURL(croppedFile);
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(croppedFile);
                            input.files = dataTransfer.files;
                            // If an existing image is re-cropped, treat it as a new image
                            newImages.push(croppedFile);
                        });
                    });

                    const removeBtn = preview.querySelector(".remove-image-btn");
                    if (removeBtn) {
                        removeBtn.addEventListener("click", () => {
                            handleRemoveImage(removeBtn, slot, input, preview);
                        });
                    }
                }

                // Upload handling
                dropzone.addEventListener("click", () => input.click());

                input.addEventListener("change", () => {
                    const file = input.files[0];
                    if (file && file.type.startsWith("image/")) {
                        openCropModal(URL.createObjectURL(file), (croppedFile) => {
                            preview.innerHTML = `
                                <img src="${URL.createObjectURL(croppedFile)}" alt="Preview" class="img-fluid">
                                <button type="button" class="remove-image-btn">Ã—</button>
                            `;
                            slot.classList.add("filled");
                            dropzone.classList.add("d-none");

                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(croppedFile);
                            input.files = dataTransfer.files;

                            newImages.push(croppedFile);

                            const img = preview.querySelector("img");
                            img.addEventListener("click", () => {
                                openCropModal(URL.createObjectURL(croppedFile), (newCroppedFile) => {
                                    img.src = URL.createObjectURL(newCroppedFile);
                                    const newDataTransfer = new DataTransfer();
                                    newDataTransfer.items.add(newCroppedFile);
                                    input.files = newDataTransfer.files;

                                    const index = newImages.indexOf(croppedFile);
                                    if (index !== -1) newImages[index] = newCroppedFile;
                                    else newImages.push(newCroppedFile);
                                });
                            });

                            const removeBtn = preview.querySelector(".remove-image-btn");
                            removeBtn.addEventListener("click", () => {
                                handleRemoveImage(removeBtn, slot, input, preview);

                                const index = newImages.indexOf(croppedFile);
                                if (index !== -1) newImages.splice(index, 1);
                            });
                        });
                    }
                });
            });
        }

        function handleRemoveImage(removeBtn, slot, input, preview) {
            const imageUrl = removeBtn.getAttribute("data-image-url");

            if (imageUrl && !removedImages.includes(imageUrl)) {
                removedImages.push(imageUrl);
            }

            preview.innerHTML = "";
            slot.classList.remove("filled");
            slot.querySelector(".image-upload-dropzone").classList.remove("d-none");
            input.value = "";
        }

        // Open Crop Modal
        function openCropModal(imageSrc, onCropComplete) {
            const image = document.getElementById("imageToCrop");
            image.src = imageSrc;

            const modal = new bootstrap.Modal(document.getElementById("cropModal"));
            modal.show();

            document.getElementById("cropModal").addEventListener(
                "shown.bs.modal",
                () => {
                    if (cropper) cropper.destroy();

                    cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 1,
                        responsive: true,
                        dragMode: 'move',
                        background: false,
                    });
                },
                { once: true }
            );

            document.getElementById("cropButton").addEventListener("click", () => {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({
                        width: Math.min(cropper.getImageData().naturalWidth, 1200),
                        height: Math.min(cropper.getImageData().naturalHeight, 1200),
                    });

                    canvas.toBlob((blob) => {
                        const croppedFile = new File([blob], `cropped-image-${Date.now()}.jpg`, {
                            type: "image/jpeg",
                        });
                        onCropComplete(croppedFile);
                        modal.hide();
                    }, "image/jpeg", 0.95);
                }
            }, { once: true });

            modalElement.addEventListener("hidden.bs.modal", function onHidden() {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
                // Remove this listener after it runs
                modalElement.removeEventListener("hidden.bs.modal", onHidden);
            });
        }

        // Initialize image slots
        const imageContainers = document.querySelectorAll(".image-upload-row");
        imageContainers.forEach(container => {
            setupImageSlots(container);
        });
    });
    </script>
</body>