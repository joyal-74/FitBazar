<head>
    <style>
        /* Order Summary */
        .order-summary {
            background: linear-gradient(135deg, #F9F9F9, #fbf4fc);
            border-radius: 12px;
            position: sticky;
            top: 20px;
        }
        .order-summary .btn-primary {
            background: linear-gradient(90deg, #5B3F64, #3C1549);
            border: none;
            border-radius: 12px;
            padding: 12px;
            font-size: 1.1rem;
            transition: transform 0.2s ease;
        }
        .order-summary .btn-primary:hover {
            transform: scale(1.02);
        }
        .coupon-input .btn-outline-secondary {
            border-radius: 0 5px 5px 0;
            transition: background-color 0.2s ease;
        }
        .coupon-input .btn-outline-secondary:hover {
            background-color: #6C5DD3;
            color: #FFFFFF;
            border-color: #6C5DD3;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <%- include('../partials/userNavbar', { activePage: '' }) %> 

    <!-- Progress Bar -->
    

    <!-- Payment Section -->
    <main class="container mt-4">
        <div class="d-flex justify-content-between w-100 align-items-center mb-3"
            style="padding: 16px; border-radius: 10px;">
            <h4 class="fw-bold mb-0 text-dark">Discover Items in your Cart</h4>
            <div class="d-flex justify-content-center align-items-center gap-3">
                <div class="progress-step active">
                    <i class="fas fa-shopping-cart text-muted me-1" style="font-size: 1rem;"></i>
                    <span class="fw-medium" style="font-size: 0.8rem;">Cart</span>
                </div>
                <i class="fas fa-arrow-right progress-arrow text-muted"></i>
                <div class="progress-step">
                    <i class="fas fa-truck me-1 text-muted" style="font-size: 0.9rem;"></i>
                    <span style="font-size: 0.9rem;">Shipping</span>
                </div>
                <i class="fas fa-arrow-right progress-arrow"></i>
                <div class="progress-step">
                    <i class="fas fa-credit-card me-1" style="font-size: 0.9rem;"></i>
                    <span class="fw-medium" style="font-size: 0.9rem;">Payments</span>
                </div>
            </div>
        </div>
        <form id="paymentForm">
            <div class="row g-4">
                <!-- Payment Methods -->
                <div class="col-md-8">
                    
                    <!-- Razorpay -->
                    <div class="card p-4 mb-3 border-0 shadow-sm" style="background-color: #F8F8F8;">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" value="netbanking" id="netbanking" checked>
                            <label class="form-check-label w-100" for="netbanking">
                                <div class="d-flex align-items-center">
                                    <img src="/razorpay.png" alt="Razorpay" class="me-3" width="24">
                                    <div>
                                        <strong>NetBanking</strong>
                                        <p class="mb-0 text-muted" style="font-size: 14px;">Pay using online banking</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
            
                    <!-- Google Pay / UPI -->
                    <!-- <div class="card p-3 mb-3 border-0 shadow-sm" style="background-color: #F8F8F8;">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" value="gpay" id="gpay">
                            <label class="form-check-label w-100" for="gpay">
                                <div class="d-flex align-items-center">
                                    <img src="/google-logo.png" alt="Google Pay" class="me-3" width="24">
                                    <div>
                                        <strong>UPI Payment</strong>
                                        <p class="mb-0 text-muted" style="font-size: 14px;">Pay by any UPI app</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div> -->
            
                    <!-- Credit/Debit Card -->
                    <div class="card p-3 mb-3 border-0 shadow-sm" style="background-color: #F8F8F8;">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" value="card" id="card">
                            <label class="form-check-label w-100" for="card">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-credit-card me-3" style="font-size: 24px;"></i>
                                    <div>
                                        <strong>Credit/Debit Card</strong>
                                        <p class="mb-0 text-muted" style="font-size: 14px;">Add any secure card by RBI guidelines</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
            
                    <!-- Wallets -->
                    <div class="card p-4 mb-3 border-0 shadow-sm" style="background-color: #F8F8F8;">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" value="wallet" id="wallet">
                            <label class="form-check-label w-100" for="wallet">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-wallet me-3" style="font-size: 24px;"></i>
                                    <div>
                                        <strong>Wallets</strong>
                                        <p class="mb-0 text-muted" style="font-size: 14px;">Use your FitBazar wallet</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
            
                    <!-- Cash on Delivery -->
                    <div class="card p-4 mb-3 border-0 shadow-sm" style="background-color: #F8F8F8;">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentMethod" value="cod" id="cod">
                            <label class="form-check-label w-100" for="cod">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-money-bill-wave me-3" style="font-size: 24px;"></i>
                                    <div>
                                        <strong>Cash on Delivery</strong>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
    
                <!-- Price Summary -->
                <div class="col-md-4">
                    <div class="card p-3 shadow-sm border-0 order-summary mb-3">
                        <h5 class="fw-bold text-dark mb-4">Price Details</h5>

                        <% if (cart && cart.items && cart.items.length > 0) { %>
                            <% let total = 0; %>
                            <% cart.items.forEach(item => { %>
                                <% total += item.quantity * item.price; %>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="text-muted text-truncate" 
                                          style="font-size: 0.95rem; max-width: 70%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        <%= item.quantity %>x <%= item.productId.name %>
                                    </span>
                                    <span class="text-dark fw-medium flex-shrink-0">
                                        ₹ <%= (item.quantity * item.price).toLocaleString('en-IN') %>
                                    </span>
                                </div>
                            <% }) %>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="text-muted" style="font-size: 0.95rem;">Delivery Charges</span>
                                <span class="<%= deliveryCharge ? 'text-danger' : 'text-success' %> flex-shrink-0">
                                    <%= deliveryCharge ? `₹ ${deliveryCharge}` : 'Free' %>
                                </span>
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="text-muted" style="font-size: 0.95rem;">Coupon Discount</span>
                                <span class="text-success fw-semibold flex-shrink-0">₹ <%= couponDiscount %></span>
                            </div>
                            <hr class="my-2" style="border-color: #E0E0E0;">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-bold text-dark" style="font-size: 1.2rem;">Grand Total</span>
                                <span id="grandTotal" class="fw-bold text-dark flex-shrink-0" style="font-size: 1.2rem;" 
                                    value="<%= grandTotal %>">
                                    ₹ <%= grandTotal.toLocaleString('en-IN') %>
                                </span>
                            </div>
                            
                            <!-- Combined submit button -->
                            <button type="submit" class="btn btn-primary w-100 mt-4">Place Order</button>
                        <% } else { %>
                            <p class="text-muted text-center fs-5">No items in your cart.</p>
                        <% } %>
                    </div>
                </div>
                
            </div>
        </form>
    </main>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const paymentForm = document.getElementById('paymentForm');

        paymentForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Get the selected payment method with validation
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPaymentMethod) {
                Swal.fire({
                    text: 'Please select a payment method!',
                    icon: 'warning',
                    timer: 2000,
                    showConfirmButton: false
                });
                return;
            }

            const paymentMethod = selectedPaymentMethod.value;
            console.log('Selected Payment Method:', paymentMethod);

            const totalValue = document.getElementById('grandTotal').getAttribute('value');
            const totalPrice = Number(totalValue);

            if (!totalPrice || totalPrice <= 0) {
                Swal.fire({
                    text: 'Invalid total amount!',
                    icon: 'error',
                    timer: 2000,
                    showConfirmButton: false
                });
                return;
            }

            if (paymentMethod === 'netbanking' || paymentMethod === 'card') {
                await handleRazorpayPayment(paymentMethod, totalPrice);
            } else {
                await handleOtherPaymentMethods(paymentMethod, totalPrice);
            }
        });

        async function handleRazorpayPayment(paymentMethod, totalPrice) {
            try {
                const response = await fetch('/user/payments/razorpay', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ totalPrice })
                });

                const data = await response.json();
                if (!response.ok) throw new Error(data.error || 'Failed to create Razorpay order');

                const options = {
                    key: '<%= process.env.RAZOR_API_KEY %>',
                    amount: data.amount,
                    currency: data.currency,
                    name: 'FitBazar',
                    description: 'Fitness Equipment Purchase',
                    order_id: data.orderId,
                    config: {
                        display: {
                            blocks: {
                                banks: {
                                    name: `Pay Using ${paymentMethod === 'netbanking' ? 'Netbanking' : 'Debit/Credit Cards'}`,
                                    instruments: [{ method: paymentMethod }]
                                }
                            },
                            sequence: ['block.banks'],
                            preferences: { show_default_blocks: false }
                        }
                    },
                    handler: async function (response) {
                        await verifyAndProcessOrder(response, totalPrice, paymentMethod);
                    },
                    prefill: {
                        name: '<%= user ? user.name : "" %>',
                        email: '<%= user ? user.email : "" %>',
                        contact: '<%= user ? user.phone : "" %>'
                    },
                    theme: { color: '#3B3389' }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    Swal.fire({
                        text: `Payment failed: ${response.error.description || 'Unknown error'}`,
                        icon: 'error',
                        timer: 3000,
                        showConfirmButton: false
                    });
                });
                rzp.open();
            } catch (error) {
                console.error('Razorpay Error:', error);
                Swal.fire({
                    text: error.message || 'An error occurred with Razorpay',
                    icon: 'error',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }

        async function verifyAndProcessOrder(response, totalPrice, paymentMethod) {
            try {
                console.log('Verifying with Payment Method:', paymentMethod);
                const verifyResponse = await fetch('/user/payments/verify', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        razorpayPaymentId: response.razorpay_payment_id,
                        razorpayOrderId: response.razorpay_order_id,
                        razorpaySignature: response.razorpay_signature
                    })
                });

                const verifyData = await verifyResponse.json();
                if (!verifyData.success) throw new Error(verifyData.error || 'Payment verification failed');

                const orderData = {
                    couponApplied: false,
                    paymentMethod: paymentMethod,
                    totalPrice,
                    razorpayPaymentId: response.razorpay_payment_id,
                    razorpayOrderId: response.razorpay_order_id
                };

                const orderResponse = await fetch('/user/payments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderData)
                });

                const orderDataResult = await orderResponse.json();
                if (!orderResponse.ok) throw new Error(orderDataResult.error || 'Failed to process order');

                Swal.fire({
                    text: orderDataResult.message || 'Payment successful and order placed!',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => window.location.href = '/user/confirmOrder');
            } catch (error) {
                console.error('Verification/Order Error:', error);
                Swal.fire({
                    text: `Error processing order with ${paymentMethod || 'unknown method'}: ${error.message}`,
                    icon: 'error',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }

        async function handleOtherPaymentMethods(paymentMethod, totalPrice) {
            try {
                console.log('Handling Other Payment Method:', paymentMethod);
                const response = await fetch('/user/payments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        couponApplied: false,
                        paymentMethod: paymentMethod,
                        totalPrice
                    })
                });

                const data = await response.json();
                if (!response.ok) throw new Error(data.error || 'Payment processing failed');

                Swal.fire({
                    text: data.message || 'Order placed successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                }).then(() => window.location.href = '/user/confirmOrder');
            } catch (error) {
                console.error('Other Payment Error:', error);
                Swal.fire({
                    text: `Error with ${paymentMethod || 'unknown method'}: ${error.message}`,
                    icon: 'error',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }
    });
</script>
</body>